#!/usr/bin/env ruby

require 'optparse'
require 'rubygems'
require 'beaver'

# Parse a string from the command-line into a Date object
def parse_date(date)
  case date
    when /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/ then Date.parse(date)
    when /^-\d+$/ then Date.today + date.to_i
    else nil
  end
end

options = {}
o = OptionParser.new do |opts|
  opts.banner = 'Usage: beaver [options] dsl.rb [dsl2.rb...] /rails/production.log [/rails/production2.log...]'
  opts.on('--on DATE', 'Only include log entries from the given date (yyyy-mm-dd or -n days)') { |d| options[:on] = parse_date(d) }
  opts.on('--after DATE', 'Only include log entries from after the given date (yyyy-mm-dd or -n days)') { |d| options[:after] = parse_date(d) }
  opts.on('--before DATE', 'Only include log entries from before the given date (yyyy-mm-dd or -n days)') { |d| options[:before] = parse_date(d) }
  opts.on('--today', 'Alias to --on=-0') { options[:on] = Date.today }
  opts.on('--yesterday', 'Alias to --on=-1') { options[:on] = Date.today-1 }
  opts.on('-v', '--version', 'Show version') { puts "beaver #{Beaver::VERSION}"; exit }
end
o.parse!

# Separate the beaver files and log files
beaver_files, log_files = ARGV.uniq.partition { |a| a =~ /\.rb$/ }

if beaver_files.empty? or log_files.empty?
  puts o.banner
  exit 1
end

# Read in the beaver files
beaver_files.map! { |b| File.open(b, &:read) }

# Parse them
Beaver.parse *[log_files, options].flatten do
  beaver_files.each { |b| eval b }
end
